Fallout-Themed Pixel-Art BTC Bonsai Tracker
With strict UI based on assets.zip

🧠 Core Functionalities (Revised)
1. 📈 Real-Time BTC Price Tracker
Source: CoinGecko API
Logic:
Pull BTC price every 5 minutes
Compare current price to:
Avg. Buy Price (calculated from all logged "Water" actions, i.e., buys)
If no buys: fallback to last 24h close
2. 🌳 Growth Logic — Visual State Mapping
Visuals from plant look on percentage changes.png + special images
Image updates based on % change from average buy price
% Change from Avg Buy	Visual State	Asset Source
> Highest positive %	Fruiting tree (ATH)	all time high.png
+30%	Full bonsai (green)	From visual sheet
+20%	Mid bonsai (green)	From visual sheet
+10%	Small bonsai (green)	From visual sheet
0%	Empty pot (neutral)	From visual sheet
-10%	Wilted bonsai (red)	From visual sheet
-20%	Dry/red bonsai	From visual sheet
-30%	Dead + cracked pot	From visual sheet
< Lowest threshold	Cracked pot (ATL)	all time low.png
3. 💧 Water = Buy
Represents when user buys BTC
Action:
Logs timestamp and buy price
Updates average buy price automatically
JSON schema:
{
  "water_log": [
    { "timestamp": "2025-05-13T10:22:00", "price": 61500 }
  ]
}
💡 Avg Buy Price = Mean of all water_log.price entries

4. 🍊 Harvest = Sell
Represents a BTC sell action
Action:
Logs timestamp, sell price
Optionally calculates and stores gain/loss from average buy
JSON schema:
{
  "harvest_log": [
    { "timestamp": "2025-05-13T11:00:00", "price": 65500 }
  ]
}
5. ⚙️ Custom Thresholds (Dynamic UI)
UI strictly matches app settings.png
Users can:
Set any positive and negative % thresholds (not limited to 10/20/30)
Example:
{
  "positive_thresholds": [12, 25, 47],
  "negative_thresholds": [-7, -15, -33]
}
Thresholds drive growth visuals as above
6. 🔐 Storage Plan
All user data is stored locally for privacy:

{
  "settings": {
    "positive_thresholds": [10, 20, 30],
    "negative_thresholds": [-10, -20, -30]
  },
  "anchor": "average_buy_price",  // auto-calculated
  "water_log": [],
  "harvest_log": []
}
Use:

Web: localStorage or IndexedDB
Desktop: JSON file via Tauri
Mobile (Flutter): SharedPreferences or SQLite
🧩 UI Mapping (Strict from ZIP)
Feature	From File
Main widget layout	widget first page.png
Settings UI	app settings.png
Bonsai growth stages	plant look on percentage changes.png
ATH state	all time high.png
ATL state	all time low.png
🔁 Flow Summary
App starts → fetch BTC price
Compare to avg. buy price
Update bonsai visual
User taps:
💧 → logs buy @ price, recalculates average
🍊 → logs sell @ price
Settings allow custom % thresholds
All changes saved locally
