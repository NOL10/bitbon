name: Build Installers

on:
  push:
    tags:
      - 'v*'

# Update permissions to include releases
permissions:
  contents: write
  packages: write

jobs:
  build:
    runs-on: ${{ matrix.os }}
    # Set a timeout for each job
    timeout-minutes: 30

    strategy:
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]
        include:
          - os: macos-latest
            platform: mac
            arch: arm64
          - os: macos-latest
            platform: mac
            arch: x64
          - os: windows-latest
            platform: win
            arch: x64
          - os: ubuntu-latest
            platform: linux
            arch: x64

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4
        with:
          # Use GITHUB_TOKEN instead of PAT_TOKEN for releases
          token: ${{ secrets.GITHUB_TOKEN }}
          # Only fetch the specific tag we need
          ref: ${{ github.ref }}
          # Don't fetch all history
          fetch-depth: 1
          # Don't fetch submodules
          submodules: false

      - name: Clean workspace
        working-directory: ${{ github.workspace }}
        timeout-minutes: 5
        run: |
          if [ "${{ runner.os }}" = "Windows" ]; then
            if (Test-Path node_modules) { Remove-Item -Recurse -Force node_modules }
            if (Test-Path dist) { Remove-Item -Recurse -Force dist }
            if (Test-Path release) { Remove-Item -Recurse -Force release }
          else
            rm -rf node_modules dist release
          fi

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies
        working-directory: ${{ github.workspace }}
        timeout-minutes: 10
        run: |
          npm cache clean --force
          npm install --ignore-scripts
          cd client && npm install --ignore-scripts && cd ..

      - name: Build client
        working-directory: ${{ github.workspace }}
        timeout-minutes: 10
        run: cd client && npm run build && cd ..

      - name: Prepare application
        working-directory: ${{ github.workspace }}
        timeout-minutes: 5
        shell: pwsh
        if: runner.os == 'Windows'
        run: |
          if (Test-Path dist) { Remove-Item -Recurse -Force dist }
          Copy-Item -Path client/dist -Destination dist -Recurse
          if (-not (Test-Path public)) { Copy-Item -Path client/public -Destination public -Recurse -Force }

      - name: Prepare application (Unix)
        working-directory: ${{ github.workspace }}
        timeout-minutes: 5
        shell: bash
        if: runner.os != 'Windows'
        run: |
          rm -rf dist
          cp -r client/dist dist
          if [ ! -d "public" ]; then
            cp -r client/public .
          fi

      - name: Install electron dependencies
        working-directory: ${{ github.workspace }}
        timeout-minutes: 10
        run: |
          npm install electron@36.2.0 electron-builder@26.0.12 --save-dev --save-exact --ignore-scripts
          npm rebuild --build-from-source

      - name: Verify setup
        working-directory: ${{ github.workspace }}
        timeout-minutes: 5
        run: |
          if [ "${{ runner.os }}" = "Windows" ]; then
            dir
            dir dist
            dir electron
            dir public
            dir node_modules
            type package.json | findstr electron
          else
            ls -la
            ls -la dist
            ls -la electron
            ls -la public
            ls -la node_modules
            grep electron package.json
          fi

      - name: Build installers
        working-directory: ${{ github.workspace }}
        timeout-minutes: 15
        run: |
          if [ "${{ runner.os }}" = "Windows" ]; then
            npx electron-builder --win --x64 --publish=never --config.win.signAndEditExecutable=false --config.win.verifyUpdateCodeSignature=false
          elif [ "${{ runner.os }}" = "macOS" ]; then
            if [ "${{ matrix.arch }}" = "arm64" ]; then
              npx electron-builder --mac --arm64 --publish=never --config.mac.identity=null
            else
              npx electron-builder --mac --x64 --publish=never --config.mac.identity=null
            fi
          else
            npx electron-builder --linux --x64 --publish=never
          fi
        env:
          CSC_IDENTITY_AUTO_DISCOVERY: "false"
          CSC_LINK: ""
          CSC_KEY_PASSWORD: ""
          ELECTRON_BUILDER_ALLOW_UNRESOLVED_DEPENDENCIES: "true"
          ELECTRON_BUILDER_SKIP_CODE_SIGNING: "true"
          ELECTRON_BUILDER_CACHE: "false"

      - name: Verify artifacts
        working-directory: ${{ github.workspace }}
        timeout-minutes: 5
        run: |
          if [ "${{ runner.os }}" = "Windows" ]; then
            dir release
          else
            ls -la release
          fi

      - name: Create Release
        uses: softprops/action-gh-release@v2
        timeout-minutes: 5
        with:
          # Use GITHUB_TOKEN instead of PAT_TOKEN
          token: ${{ secrets.GITHUB_TOKEN }}
          files: |
            ${{ github.workspace }}/release/*.exe
            ${{ github.workspace }}/release/*.dmg
            ${{ github.workspace }}/release/*.zip
            ${{ github.workspace }}/release/*.AppImage
            ${{ github.workspace }}/release/*.deb
          draft: false
          prerelease: false
          generate_release_notes: true
          # Add error handling for missing files
          fail_on_unmatched_files: false

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        timeout-minutes: 5
        with:
          name: bitbon-${{ matrix.platform }}-${{ matrix.arch }}
          path: ${{ github.workspace }}/release/
          if-no-files-found: warn  # Change from error to warn to handle empty releases 