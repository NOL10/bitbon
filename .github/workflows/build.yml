name: Build Installers

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  packages: write

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT_TOKEN }}

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        working-directory: ${{ github.workspace }}
        run: |
          npm install --ignore-scripts
          cd client && npm install --ignore-scripts && cd ..

      - name: Build client
        working-directory: ${{ github.workspace }}
        run: cd client && npm run build && cd ..

      - name: Prepare build directory (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        working-directory: ${{ github.workspace }}
        run: |
          if (Test-Path build) { Remove-Item -Recurse -Force build }
          New-Item -ItemType Directory -Force -Path build
          Copy-Item -Path dist,electron,package.json,package-lock.json,public -Destination build -Recurse
          Set-Location build
          npm install --ignore-scripts
          npm install electron@36.2.0 electron-builder@26.0.12 --save-dev --save-exact --ignore-scripts
          npm rebuild --build-from-source
          Set-Location ..

      - name: Prepare build directory (Unix)
        if: runner.os != 'Windows'
        working-directory: ${{ github.workspace }}
        run: |
          rm -rf build
          mkdir -p build
          cp -r dist electron package.json package-lock.json public build/
          cd build
          npm install --ignore-scripts
          npm install electron@36.2.0 electron-builder@26.0.12 --save-dev --save-exact --ignore-scripts
          npm rebuild --build-from-source
          cd ..

      - name: Verify build directory (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        working-directory: ${{ github.workspace }}
        run: |
          Write-Host "Current directory:"
          Get-Location
          Write-Host "Build directory contents:"
          Get-ChildItem build
          Write-Host "Build/node_modules contents:"
          Get-ChildItem build/node_modules
          Write-Host "Build/package.json:"
          Get-Content build/package.json | Select-String "electron"

      - name: Verify build directory (Unix)
        if: runner.os != 'Windows'
        working-directory: ${{ github.workspace }}
        run: |
          echo "Current directory:"
          pwd
          echo "Build directory contents:"
          ls -la build
          echo "Build/node_modules contents:"
          ls -la build/node_modules
          echo "Build/package.json electron version:"
          grep electron build/package.json

      - name: Build installers (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        working-directory: ${{ github.workspace }}/build
        run: |
          Write-Host "Current directory:"
          Get-Location
          Write-Host "Directory contents:"
          Get-ChildItem
          npx electron-builder --publish=never
        env:
          CSC_IDENTITY_AUTO_DISCOVERY: "false"
          CSC_LINK: ""
          CSC_KEY_PASSWORD: ""
          ELECTRON_BUILDER_ALLOW_UNRESOLVED_DEPENDENCIES: "true"

      - name: Build installers (Unix)
        if: runner.os != 'Windows'
        working-directory: ${{ github.workspace }}/build
        run: |
          echo "Current directory:"
          pwd
          echo "Directory contents:"
          ls -la
          npx electron-builder --publish=never
        env:
          CSC_IDENTITY_AUTO_DISCOVERY: "false"
          CSC_LINK: ""
          CSC_KEY_PASSWORD: ""
          ELECTRON_BUILDER_ALLOW_UNRESOLVED_DEPENDENCIES: "true"

      - name: Get platform info
        id: platform
        run: |
          if [ "${{ runner.os }}" == "Windows" ]; then
            echo "platform=win" >> $GITHUB_OUTPUT
            echo "arch=x64" >> $GITHUB_OUTPUT
          elif [ "${{ runner.os }}" == "macOS" ]; then
            echo "platform=mac" >> $GITHUB_OUTPUT
            if [ "${{ runner.arch }}" == "arm64" ]; then
              echo "arch=arm64" >> $GITHUB_OUTPUT
            else
              echo "arch=x64" >> $GITHUB_OUTPUT
            fi
          else
            echo "platform=linux" >> $GITHUB_OUTPUT
            echo "arch=x64" >> $GITHUB_OUTPUT
          fi

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          token: ${{ secrets.PAT_TOKEN }}
          files: |
            ${{ github.workspace }}/release/*.exe
            ${{ github.workspace }}/release/*.dmg
            ${{ github.workspace }}/release/*.AppImage
          draft: false
          prerelease: false
          generate_release_notes: true

      - name: Upload installers
        uses: actions/upload-artifact@v4
        with:
          name: bitbon-${{ steps.platform.outputs.platform }}-${{ steps.platform.outputs.arch }}
          path: ${{ github.workspace }}/release/
          if-no-files-found: error 