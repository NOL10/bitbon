name: Build Installers

on:
  push:
    tags:
      - 'v*'

# Update permissions to include releases
permissions:
  contents: write
  packages: write

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: macos-latest
            platform: mac
            arch: x64
            target: dmg
            build_script: electron:build:mac
          - os: macos-latest
            platform: mac
            arch: arm64
            target: dmg
            build_script: electron:build:mac:arm64
          - os: windows-latest
            platform: win
            arch: x64
            target: nsis
            build_script: electron:build:win
          - os: ubuntu-latest
            platform: linux
            arch: x64
            target: AppImage
            build_script: electron:build:linux

    runs-on: ${{ matrix.os }}
    timeout-minutes: 30

    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Install platform-specific dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libgtk-3-0 \
            libnotify4 \
            libnss3 \
            libxss1 \
            libxtst6 \
            xdg-utils \
            libatspi2.0-0 \
            libuuid1 \
            libsecret-1-0 \
            squashfs-tools

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm cache clean --force
          npm install
          cd client && npm install && cd ..

      - name: Generate icons
        run: npm run generate-icons

      - name: Build client
        run: cd client && npm run build && cd ..

      - name: Debug directory structure (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          Write-Host "Current directory structure:"
          Get-ChildItem
          Write-Host "`nClient directory:"
          Get-ChildItem -Path client -ErrorAction SilentlyContinue
          Write-Host "`nClient dist directory:"
          Get-ChildItem -Path client\dist -ErrorAction SilentlyContinue || Write-Host "Client dist directory not found"
          Write-Host "`nBuild directory:"
          Get-ChildItem -Path build -ErrorAction SilentlyContinue || Write-Host "Build directory not found"
          Write-Host "`nPublic directory:"
          Get-ChildItem -Path public -ErrorAction SilentlyContinue || Write-Host "Public directory not found"

      - name: Debug directory structure (Unix)
        if: matrix.os != 'windows-latest'
        shell: bash
        run: |
          echo "Current directory structure:"
          ls -la
          echo "\nClient directory:"
          ls -la client
          echo "\nClient dist directory:"
          ls -la client/dist || echo "Client dist directory not found"
          echo "\nBuild directory:"
          ls -la build || echo "Build directory not found"
          echo "\nPublic directory:"
          ls -la public || echo "Public directory not found"

      - name: Build installer
        env:
          ELECTRON_BUILDER_ALLOW_UNRESOLVED_DEPENDENCIES: "true"
          ELECTRON_BUILDER_SKIP_CODE_SIGNING: "true"
          DEBUG: "electron-builder"
        run: |
          rm -rf node_modules/.cache
          rm -rf release
          rm -rf build
          npm run ${{ matrix.build_script }}
          echo "\nAfter build - Release directory:"
          ls -la release || echo "Release directory not found"
          echo "\nBuild directory contents:"
          ls -la build || echo "Build directory not found"

      - name: Debug build output (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          Write-Host "Final directory structure:"
          Get-ChildItem
          Write-Host "`nRelease directory contents:"
          Get-ChildItem -Path release -ErrorAction SilentlyContinue || Write-Host "Release directory not found"
          Write-Host "`nBuild directory contents:"
          Get-ChildItem -Path build -ErrorAction SilentlyContinue || Write-Host "Build directory not found"
          if (Test-Path release) {
            Write-Host "`nRelease directory details:"
            Get-ChildItem -Path release -Recurse
          }

      - name: Debug build output (Unix)
        if: matrix.os != 'windows-latest'
        shell: bash
        run: |
          echo "Final directory structure:"
          ls -la
          echo "\nRelease directory contents:"
          ls -la release || echo "Release directory not found"
          echo "\nBuild directory contents:"
          ls -la build || echo "Build directory not found"
          if [ -d "release" ]; then
            echo "\nRelease directory details:"
            find release -type f -ls
          fi

      - name: Get timestamp
        id: timestamp
        run: echo "timestamp=$(date +'%Y%m%d-%H%M%S')" >> $GITHUB_OUTPUT

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: bitbon-${{ matrix.platform }}-${{ matrix.arch }}-${{ steps.timestamp.outputs.timestamp }}
          path: release/
          if-no-files-found: warn

      - name: Create Release
        if: matrix.os == 'ubuntu-latest' && matrix.arch == 'x64'
        uses: softprops/action-gh-release@v2
        with:
          files: |
            ${{ github.workspace }}/release/*.exe
            ${{ github.workspace }}/release/*.dmg
            ${{ github.workspace }}/release/*.AppImage
          draft: false
          prerelease: false
          generate_release_notes: true
          fail_on_unmatched_files: false 